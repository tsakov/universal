(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");
    var spawn = require("child_process").spawn;
    var fs = require("fs");
    var jsdom = require("jsdom");

    fluid.require("gpiiFramework", require);
    fluid.require("./pcpUpdate.js", require);

    fluid.defaults("gpii.personalControlPanel", {
        gradeNames: ["gpii.app", "autoInit"],
        preInitFunction: "gpii.personalControlPanel.preInit",
        components: {
            initializer: {
                type: "gpii.personalControlPanel.initializer"
            }
        },
        handlers: {
            pcpUpdate: {
                route: "/pcp/update",
                type: "post"
            }
        }
    });

    fluid.defaults("gpii.personalControlPanel.initializer", {
        gradeNames: ["fluid.littleComponent", "autoInit"],
        preInitFunction: "gpii.personalControlPanel.initializer.preInit",
        defaultSetup: [ { id: "http://registry.gpii.org/common/fontSize",
                          preferenceName: "Font Size",
                          preferenceDescription: "Make letters bigger or smaller.",
                          valueSpace: {start: 8, end: 24, step: 1},
                          value: 12 },

                        { id: "http://registry.gpii.org/common/foregroundColor",
                          preferenceName: "Foreground Color",
                          preferenceDescription: "Change the color of letters.",
                          valueSpace: ["Black", "White", "Green", "Blue", "Yellow"],
                          value: "Black" },

                        { id: "http://registry.gpii.org/common/highContrast",
                          preferenceName: "High Contrast",
                          preferenceDescription: "",
                          valueSpace: "boolean",
                          value: false } ]
    });

    gpii.personalControlPanel.preInit = function (that) {
        // TODO: Support multiple sessions like LifeCycleManager

        that.start = function () {
            that.initializer.init();
            that.options.pcpInstance = spawn("node", ["--harmony", __dirname + "/app.js", __dirname, that.userToken]);
        };

        that.stop = function () {
            that.options.pcpInstance.kill();
        };
    };

    gpii.personalControlPanel.initializer.preInit = function (that) {
        that.removeSpaces = function (str) {
            return str.replace(/ /g, "");
        };

        var prefix = __dirname;

        that.generateMainDialog = function (displayedPreferences) {
            var mainDialogTemplateSource = fs.readFileSync(prefix + "/content/deps/pcp_templates/pcpMainDialog.html", "utf8");

            jsdom.env({
                html: mainDialogTemplateSource,
                scripts: ["http://code.jquery.com/jquery.js"],
                done: function (errors, window) {
                    var $ = window.$;

                    for (var i = 0; i < displayedPreferences.length; ++i) {
                        var prefClass = "pcp-" + that.removeSpaces(displayedPreferences[i].preferenceName);
                        var div = "<div class=\"" + prefClass + " fl-uiOptions-layout fl-col-flex\"> </div>"
                        $(".fl-uiOptions-category").append(div);
                    }

                    var output = $("body").html();
                    fs.writeFileSync(prefix + "/content/temp/pcpMainDialog.html", output);
                }
            });
        };

        that.generateOnloadJavaScript = function (displayedPreferences) {
            var indexTemplateSource = fs.readFileSync(prefix + "/content/deps/pcp_templates/index.html", "utf8");

            jsdom.env({
                html: indexTemplateSource,
                scripts: ["http://code.jquery.com/jquery.js"],
                done: function (errors, window) {
                    var $ = window.$;

                    $("body").attr("onload", "uiOptionsInit(" + JSON.stringify(displayedPreferences) + ")");
                    $(".jsdom").remove();

                    var output = $("html").html();
                    fs.writeFileSync(prefix + "/content/index.html", output);
                }
            });
        };

        that.init = function (displayedPreferences) {
            displayedPreferences = displayedPreferences || that.options.defaultSetup;

            that.generateMainDialog(displayedPreferences);
            that.generateOnloadJavaScript(displayedPreferences);
        };
    };

})();
